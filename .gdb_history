print('Hello there {}'.format(3 + 2))
end
python
print(os.getpid())
end
python
exit
quit
python foo = 50
python print(foo)
python import gdb
python print(dir(gdb))
python gdb.execute("b main")
python gdb.execute("r")
python gdb.execute("n")
python gdb.execute("n")n
python ret = gdb.parse_and_eval(add(4,3))
b add
d
b add
r
python print(gdb.parse_and_eval("add(1,2)"))
d
b add
r
call add(1,2)
python import gdb
python gdb.Breakpoint("add")
info b
d
python gdb.Breakpoint("add")
info b
python gdb.execute("c")
python gdb.execute("finish")
print\d $raw
print\d $rax
p $rax
python ret = gdb.parse_and_eval("$rax")
p ret
python print(ret)
quit
:q
exit
python import gdb
python gdb.Breakpoint("add")
python gdb.execute("r")
python print-stack
quit
source func_tester.py 
exit
b main
r
print "hello"
exit
source func_tester.py 
exit
test
exit
python import gdb
test
python
test
exit
test
exit
python source func_tester
python source func_tester.py
source func_tester.py
test
exit
source func_tester.py 
test
exit
source func_tester.py 
test
test
exit
test
exit
test
exit
test
python
test
end
exit
test
source func_tester.py 
test
exit
source func_tester.py 
test
exit
source func_tester.py 
test
exit
source func_tester.py 
test
exit
source func_tester.py 
test
exit
source func_tester.py 
eix
exit
test
test("hello")
dir
exit
test("add")
exit
test(add)
b add
exit
test
test("add")
exit
python gdb.Breakpoint("add")
d
source func_tester.py 
test add
info b
exit
python import gdb
python gdb.Breakpoint("add")
python gdb.execute("c")
python gdb.execute("r")
python gdb.execute("finish")
p $rax
python val = gdb.parse_and_eval("$rax")
python print val
python print(val)
p val
exit
test add
exit
source func_tester.py 
python gdb.execute("quit")
test add
test add
source func_tester.py 
test add
test add
test add
python import os
python import gdb
b add
r
finish
python ret = gdb.parse_and_eval("$rax")
python pipe_name = "/tmp/my_pipe"
python os.mkfifo(pipe_name)
python print(os.path.exists(pipe_name))
python os.unlink(pipe_name)
python print(os.path.exists(pipe_name))
python os.mkfifo(pipe_name)
python pipe = open(pipe_name, 'w')
python print(str(ret))
python pipe.write(str(ret))
python pipe = open(pipe_name, 'w')
python pipe = open(pipe_name, 'w')
python pipe.write(str(ret))
python pipe = open(pipe_name, 'w')
exit
b add
r
finish
python import os
python import gdb
p $rax
python ret = gdb.parse_and_eval("$rax")
python print(ret)
python print(pipe_name)
python pipe_name = "/tmp/my_pipe"
python os.unlink(pipe_name)
os.mkfifo(pipe_name)
python os.mkfifo(pipe_name)
python pipe = os.open(pipe_name, os.O_WRONLY)
python os.write(pipe, str(ret))
python os.write(pipe, str(ret).encode())
exit
b main
r
b add
r
d
b add
r
finish
p $rax
python import gdb
python import os
python ret = gdb.parse_and_eval("$rax")
python print(ret)
python pipe_name = "/tmp/my_pipe"
python print(os.path.exists(pipe_name))
python os.unlink(pipe_name)
python print(os.path.exists(pipe_name))
python os.mkfifo(pipe_name)
python pipe = os.open(pipe_name, os.O_WRONLY)
python os.write(pipe, str(ret).encode())
python os.close(pipe)
quit
test add
test add
quit
test add
exit
test add
test add
b add
r
info registers 
python import gdb
python import os
python
exit
python import gdb
python pip_name = "/tmp/my_pipe"
python print pip_name
python print(pip_name)
python import os
python gdb.Breakpoint("add")
python gdb.execute("r")
python gdb.execute("finish")
python print($rax)
p $rawx
p $rax
python ret = gdb.parse_and_eval($rax)
python ret = gdb.parse_and_eval("$rax")
python print ret
python print(ret)
python pipe = open(pip_name, 'w')
b main 
r
n
n
n
n
n
r
n
n
n
d
b 80
r
p ret_val
d
b 85
r
p ret_val 
p *ret_val 
exit
exit
exit
